1. MyWebsite App: Building a Custom Image

mkdir MyWebsite
cd MyWebsite/

sudo npm i -g @vue/cli-init
sudo vue init browserify .
sudo npm install

change localhost from package.json  to 0.0.0.0

make container witout Dokerfile with same steps

docker run -it -p 8080:8080 node:16 bash

mkdir app
cd app

docker cp . nice_jang:/app/ 

du -hs
npm install
npm run dev


Navigate to the MyWebsite directory
● Use the docker image build command to build the image
● Set the local directory as the working directory
● With the -f option, set the path to the Dockerfile
● With the -t option, set the name of the image in format {your_docker_hub_username}/{app_name},as we will later add our image to Docker Hub


touch Dockerfile
code Dockerfile

docker build -t mywebsite .
docker run -d -p 8080:8080 mywebsite

if use #EXPOSE 8080
command need to be: docker run -d -P mywebsite
and we got random port


this is a Dokerfile

FROM node:16

#EXPOSE 8080

WORKDIR /app

COPY . .

RUN npm install

# CMD [ "npm", "run", "dev" ]
ENTRYPOINT npm run dev%   


Publish the image

docker login

To push our image to Docker Hub, we should first log-in to Docker Hub with the command below. If this is the first
time you log in, you should enter your credentials. Make sure that login is successful:

docker tag mywebsite bloodtaint/mywebsite
docker push  bloodtaint/mywebsite


2. WordPress App with MySQL Database: Connecting

docker network create my_network   

docker run -dit → runs the image detached and in interactive mode;
• --name wordpress_db → names the container wordpress_db;
• -e MYSQL_ROOT_PASSWORD=pass → sets the password for the root MySQL user;
• -e MYSQL_DATABASE=wordpressdb → sets the name of the MySQL database that we'll use for the
WordPress installation;
• -e MYSQL_USER=wordpress → sets the MySQL user that we'll use for the WordPress installation;
• -e MYSQL_PASSWORD=wordpress → sets the password for that user;
• --expose 3306 → sets the port of the container;
• --expose 33060 → sets the SSL port of the container;
• --network my_network → sets the network that we want to attach our container to;
• -v ${PWD}/data:/var/lib/mysql → maps the directory on our local machine to the directory of the
container, so that we can store data outside of it;
• mysql → the name of the ima


docker run -dit \
--name wordpress_db \
-e MYSQL_ROOT_PASSWORD=pass \
-e MYSQL_DATABASE=wordpressdb \
-e MYSQL_USER=wordpress \
-e MYSQL_PASSWORD=wordpress \
--expose 3306 \
--expose 33060 \
--network my_network \
-v ${PWD}/data:/var/lib/mysql \
mysql 



docker run -dit \
--name wordpress-website \
-e WORDPRESS_DB_HOST=wordpress_db \
-e WORDPRESS_DB_USER=wordpress \
-e WORDPRESS_DB_PASSWORD=wordpress \
-e WORDPRESS_DB_NAME=wordpressdb \
-v ${PWD}/wp-data:/var/www/html \
-p 80:80 \
--network my_network \
wordpress 


3. WordPress App with MySQL Database: Docker Compose YAML file
make all command to one yml with: https://www.composerize.com/

version: '3.3'
services:
    mysql:
        container_name: wordpress_db
        environment:
            - MYSQL_ROOT_PASSWORD=pass
            - MYSQL_DATABASE=wordpressdb
            - MYSQL_USER=wordpress
            - MYSQL_PASSWORD=wordpress
        expose:
            - 3306
            - 33060
        networks: 
            - my_network
        volumes:
            - '${PWD}/data:/var/lib/mysql'
        image: mysql

    wordpress:
        container_name: wordpress-website
        environment:
            - WORDPRESS_DB_HOST=wordpress_db
            - WORDPRESS_DB_USER=wordpress
            - WORDPRESS_DB_PASSWORD=wordpress
            - WORDPRESS_DB_NAME=wordpressdb
        volumes:
            - '${PWD}/wp-data:/var/www/html'
        ports:
            - '80:80'
        networks:
            - my_network
        image: wordpress
networks:
    my_network:

docker-compose down --rmi all --volumes       