az login --use-device-code
or "az login"

docker login 
docker login azure

az group create --name "taskBoardResourceGroup" --location westeurope

az acr create --resource-group taskBoardResourceGroup --name taskboardcr --sku Basic

docker context use default 

az acr login --name taskboardcr

docker compose up --build
(to try do you app working in our pc)

change docker-compose.yml 

(change) from 5000:80
	ports: 80:80
(add)    
	image: taskboardcr.azure.io/taskboard-image
(add)   
	deploy:
	    resources: 
		reservations:
		    cpus: "2"
		    memory: 2GB
		    
docker compose build

docker compose push

az acr repository show --name taskboardcr --repository taskboard-image

change docker-compose.yml 
(add)
	driver: azure_file
		driver_opts:
		    share_name: sql-volumes
		    storage_account_name: taskboardstorageacc




docker context create aci taskboardcontext

docker context use taskboardcontext

docker compose up


With information


az login --use-device-code
 -> Initiates the login process to authenticate with your Azure account using the device code authentication flow.

az group create --name "taskBoardResourceGroup" --location westeurope
 -> Creates an Azure resource group with the specified name ("taskBoardResourceGroup") in the specified location ("westeurope"). The resource group is a logical container for organizing and managing Azure resources.

az acr create --resource-group taskBoardResourceGroup --name taskboardcr --sku Basic
 -> Creates an Azure Container Registry (ACR) with the specified name ("taskboardcr") in the specified resource group ("taskBoardResourceGroup") and with the specified SKU ("Basic"). ACR is a private container registry used to store and manage container images.

docker context use default
 -> Sets the Docker context to the default context, which means you're using the local Docker engine.

az acr login --name taskboardcr
 -> Authenticates Docker CLI with the specified Azure Container Registry ("taskboardcr") to enable pushing and pulling container images.

docker compose up --build
 -> Builds and starts the containers defined in the Docker Compose file in the current directory. The --build option ensures that the images are rebuilt before starting the containers.

#Change the docker-compose.yml file: Modify the Docker Compose file to make necessary changes like updating the port mappings, adding an image tag, and specifying resource reservations for the container.

docker compose build
 -> Builds the container images defined in the Docker Compose file without starting the containers.

docker compose push
 -> Pushes the container images to the Azure Container Registry specified in the Docker Compose file.

az acr repository show --name taskboardcr --repository taskboard-image
 -> Retrieves information about the specified repository ("taskboard-image") in the specified Azure Container 	 ("taskboardcr"). It shows details such as the image name, digest, size, and tags.

#Change the docker-compose.yml file: Modify the Docker Compose file again to add the "driver" and "driver_opts" sections for Azure File storage to be used as a volume mount for the container.

az login
 -> Logs in to your Azure account using the Azure CLI.

docker login
 -> Authenticates Docker CLI with the Docker registry to enable pushing and pulling container images.

docker login azure
 -> Authenticates Docker CLI with Azure to enable pushing and pulling container images from Azure Container Registry.

docker context create aci taskboardcontext
 -> Creates a Docker context for Azure Container Instances (ACI) with the specified name ("taskboardcontext").

docker context use taskboardcontext
 -> Sets the Docker context to the specified ACI context ("taskboardcontext"), allowing you to manage and interact with ACI resources.

docker compose up
 -> Starts the containers defined in the Docker Compose file using Azure Container Instances as the runtime environment.

