# name: "Terraform"

# on:
#   push:
#     branches: ["main"]

# permissions:
#   contents: read

# env:
#   ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#   ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET}}
#   ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#   ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     environment: production

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#       # Checkout the repository to the GitHub Actions runner
#       - name: Checkout
#         uses: actions/checkout@v3

#       # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.1.7

#       # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#       - name: Terraform Init
#         run: terraform init

#       # Login to Azure via Azure CLI
#       - name: Login via Azure CLI
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}

#       # Checks that all Terraform configuration files adhere to a canonical format
#       - name: Terraform Apply
#         run: terraform apply -auto-approve

name: Terraform

on:
  push:
    branches: ["main"]

permissions:
  contents: read

env:
  ARM_CLIENT_ID: "8f131bc9-c5b2-4bd4-b8ba-7b70dc4ee9f7"
  ARM_CLIENT_SECRET: ".9V8Q~NnUtELoWl88JsKBBToHUK.QCgRLVeDAbj3"
  ARM_SUBSCRIPTION_ID: "926f046f-9150-4c5b-8002-334a2bc99822"
  ARM_TENANT_ID: "4a06d40c-e447-42be-baef-dd0421ed10bd"

# env:
#   ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#   ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#   ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#   ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless of the runner's operating system
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Login to Azure via Azure CLI
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          # creds: ${{ secrets.AZURE_CREDENTIALS }}
          creds: {
              "clientId": "8f131bc9-c5b2-4bd4-b8ba-7b70dc4ee9f7",
              "clientSecret": ".9V8Q~NnUtELoWl88JsKBBToHUK.QCgRLVeDAbj3",
              "subscriptionId": "926f046f-9150-4c5b-8002-334a2bc99822",
              "tenantId": "4a06d40c-e447-42be-baef-dd0421ed10bd",
              "activeDirectoryEndpointUrl": "https://login.microsoftonline.com",
              "resourceManagerEndpointUrl": "https://management.azure.com/",
              "activeDirectoryGraphResourceId": "https://graph.windows.net/",
              "sqlManagementEndpointUrl": "https://management.core.windows.net:8443/",
              "galleryEndpointUrl": "https://gallery.azure.com/",
              "managementEndpointUrl": "https://management.core.windows.net/"
            }


      # Apply Terraform changes
      - name: Terraform Apply
        run: terraform apply -auto-approve
